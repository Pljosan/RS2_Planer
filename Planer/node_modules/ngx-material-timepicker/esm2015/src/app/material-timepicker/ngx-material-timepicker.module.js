/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { NgxMaterialTimepickerComponent } from './ngx-material-timepicker.component';
import { StyleSanitizerPipe } from './pipes/style-sanitizer.pipe';
import { NgxMaterialTimepickerMinutesFaceComponent } from './components/timepicker-minutes-face/ngx-material-timepicker-minutes-face.component';
import { NgxMaterialTimepickerService } from './services/ngx-material-timepicker.service';
import { NgxMaterialTimepickerFaceComponent } from './components/timepicker-face/ngx-material-timepicker-face.component';
import { TimeFormatterPipe } from './pipes/time-formatter.pipe';
import { NgxMaterialTimepickerButtonComponent } from './components/timepicker-button/ngx-material-timepicker-button.component';
import { TimepickerDirective } from './directives/ngx-timepicker.directive';
import { OverlayDirective } from './directives/overlay.directive';
import { NgxMaterialTimepickerEventService } from './services/ngx-material-timepicker-event.service';
import { NgxMaterialTimepickerToggleComponent } from './components/timepicker-toggle-button/ngx-material-timepicker-toggle.component';
import { NgxMaterialTimepickerToggleIconDirective } from './directives/ngx-material-timepicker-toggle-icon.directive';
import { NgxMaterialTimepicker12HoursFaceComponent } from './components/timepicker-12-hours-face/ngx-material-timepicker-12-hours-face.component';
import { NgxMaterialTimepicker24HoursFaceComponent } from './components/timepicker-24-hours-face/ngx-material-timepicker-24-hours-face.component';
import { FormsModule } from '@angular/forms';
import { NgxMaterialTimepickerDialComponent } from './components/timepicker-dial/ngx-material-timepicker-dial.component';
import { NgxMaterialTimepickerDialControlComponent } from './components/timepicker-dial-control/ngx-material-timepicker-dial-control.component';
import { MinutesFormatterPipe } from './pipes/minutes-formatter.pipe';
import { NgxMaterialTimepickerPeriodComponent } from './components/timepicker-period/ngx-material-timepicker-period.component';
import { AutofocusDirective } from './directives/autofocus.directive';
export class NgxMaterialTimepickerModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: NgxMaterialTimepickerModule,
            providers: [NgxMaterialTimepickerService, NgxMaterialTimepickerEventService]
        };
    }
}
NgxMaterialTimepickerModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FormsModule
                ],
                exports: [
                    NgxMaterialTimepickerComponent,
                    NgxMaterialTimepickerToggleComponent,
                    TimepickerDirective,
                    NgxMaterialTimepickerToggleIconDirective
                ],
                declarations: [
                    NgxMaterialTimepickerComponent,
                    NgxMaterialTimepicker24HoursFaceComponent,
                    NgxMaterialTimepicker12HoursFaceComponent,
                    NgxMaterialTimepickerMinutesFaceComponent,
                    NgxMaterialTimepickerFaceComponent,
                    NgxMaterialTimepickerToggleComponent,
                    NgxMaterialTimepickerButtonComponent,
                    NgxMaterialTimepickerDialComponent,
                    NgxMaterialTimepickerDialControlComponent,
                    NgxMaterialTimepickerPeriodComponent,
                    StyleSanitizerPipe,
                    TimeFormatterPipe,
                    TimepickerDirective,
                    OverlayDirective,
                    NgxMaterialTimepickerToggleIconDirective,
                    AutofocusDirective,
                    MinutesFormatterPipe
                ]
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LW1hdGVyaWFsLXRpbWVwaWNrZXIubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LW1hdGVyaWFsLXRpbWVwaWNrZXIvIiwic291cmNlcyI6WyJzcmMvYXBwL21hdGVyaWFsLXRpbWVwaWNrZXIvbmd4LW1hdGVyaWFsLXRpbWVwaWNrZXIubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQXNCLFFBQVEsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUM1RCxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFDN0MsT0FBTyxFQUFDLDhCQUE4QixFQUFDLE1BQU0scUNBQXFDLENBQUM7QUFDbkYsT0FBTyxFQUFDLGtCQUFrQixFQUFDLE1BQU0sOEJBQThCLENBQUM7QUFDaEUsT0FBTyxFQUFDLHlDQUF5QyxFQUFDLE1BQU0scUZBQXFGLENBQUM7QUFDOUksT0FBTyxFQUFDLDRCQUE0QixFQUFDLE1BQU0sNENBQTRDLENBQUM7QUFDeEYsT0FBTyxFQUFDLGtDQUFrQyxFQUFDLE1BQU0scUVBQXFFLENBQUM7QUFDdkgsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sNkJBQTZCLENBQUM7QUFDOUQsT0FBTyxFQUFDLG9DQUFvQyxFQUFDLE1BQU0seUVBQXlFLENBQUM7QUFDN0gsT0FBTyxFQUFDLG1CQUFtQixFQUFDLE1BQU0sdUNBQXVDLENBQUM7QUFDMUUsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0sZ0NBQWdDLENBQUM7QUFDaEUsT0FBTyxFQUFDLGlDQUFpQyxFQUFDLE1BQU0sa0RBQWtELENBQUM7QUFDbkcsT0FBTyxFQUFDLG9DQUFvQyxFQUFDLE1BQU0sZ0ZBQWdGLENBQUM7QUFDcEksT0FBTyxFQUFDLHdDQUF3QyxFQUFDLE1BQU0sNERBQTRELENBQUM7QUFDcEgsT0FBTyxFQUFDLHlDQUF5QyxFQUFDLE1BQU0sdUZBQXVGLENBQUM7QUFDaEosT0FBTyxFQUFDLHlDQUF5QyxFQUFDLE1BQU0sdUZBQXVGLENBQUM7QUFDaEosT0FBTyxFQUFDLFdBQVcsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQzNDLE9BQU8sRUFBQyxrQ0FBa0MsRUFBQyxNQUFNLHFFQUFxRSxDQUFDO0FBQ3ZILE9BQU8sRUFBQyx5Q0FBeUMsRUFBQyxNQUFNLHFGQUFxRixDQUFDO0FBQzlJLE9BQU8sRUFBQyxvQkFBb0IsRUFBQyxNQUFNLGdDQUFnQyxDQUFDO0FBQ3BFLE9BQU8sRUFBQyxvQ0FBb0MsRUFBQyxNQUFNLHlFQUF5RSxDQUFDO0FBQzdILE9BQU8sRUFBQyxrQkFBa0IsRUFBQyxNQUFNLGtDQUFrQyxDQUFDO0FBaUNwRSxNQUFNLE9BQU8sMkJBQTJCOzs7O0lBQ3BDLE1BQU0sQ0FBQyxPQUFPO1FBQ1YsT0FBTztZQUNILFFBQVEsRUFBRSwyQkFBMkI7WUFDckMsU0FBUyxFQUFFLENBQUMsNEJBQTRCLEVBQUUsaUNBQWlDLENBQUM7U0FDL0UsQ0FBQztJQUNOLENBQUM7OztZQXJDSixRQUFRLFNBQUM7Z0JBQ04sT0FBTyxFQUFFO29CQUNMLFlBQVk7b0JBQ1osV0FBVztpQkFDZDtnQkFDRCxPQUFPLEVBQUU7b0JBQ0wsOEJBQThCO29CQUM5QixvQ0FBb0M7b0JBQ3BDLG1CQUFtQjtvQkFDbkIsd0NBQXdDO2lCQUMzQztnQkFDRCxZQUFZLEVBQUU7b0JBQ1YsOEJBQThCO29CQUM5Qix5Q0FBeUM7b0JBQ3pDLHlDQUF5QztvQkFDekMseUNBQXlDO29CQUN6QyxrQ0FBa0M7b0JBQ2xDLG9DQUFvQztvQkFDcEMsb0NBQW9DO29CQUNwQyxrQ0FBa0M7b0JBQ2xDLHlDQUF5QztvQkFDekMsb0NBQW9DO29CQUNwQyxrQkFBa0I7b0JBQ2xCLGlCQUFpQjtvQkFDakIsbUJBQW1CO29CQUNuQixnQkFBZ0I7b0JBQ2hCLHdDQUF3QztvQkFDeEMsa0JBQWtCO29CQUNsQixvQkFBb0I7aUJBQ3ZCO2FBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge01vZHVsZVdpdGhQcm92aWRlcnMsIE5nTW9kdWxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtDb21tb25Nb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcbmltcG9ydCB7Tmd4TWF0ZXJpYWxUaW1lcGlja2VyQ29tcG9uZW50fSBmcm9tICcuL25neC1tYXRlcmlhbC10aW1lcGlja2VyLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7U3R5bGVTYW5pdGl6ZXJQaXBlfSBmcm9tICcuL3BpcGVzL3N0eWxlLXNhbml0aXplci5waXBlJztcclxuaW1wb3J0IHtOZ3hNYXRlcmlhbFRpbWVwaWNrZXJNaW51dGVzRmFjZUNvbXBvbmVudH0gZnJvbSAnLi9jb21wb25lbnRzL3RpbWVwaWNrZXItbWludXRlcy1mYWNlL25neC1tYXRlcmlhbC10aW1lcGlja2VyLW1pbnV0ZXMtZmFjZS5jb21wb25lbnQnO1xyXG5pbXBvcnQge05neE1hdGVyaWFsVGltZXBpY2tlclNlcnZpY2V9IGZyb20gJy4vc2VydmljZXMvbmd4LW1hdGVyaWFsLXRpbWVwaWNrZXIuc2VydmljZSc7XHJcbmltcG9ydCB7Tmd4TWF0ZXJpYWxUaW1lcGlja2VyRmFjZUNvbXBvbmVudH0gZnJvbSAnLi9jb21wb25lbnRzL3RpbWVwaWNrZXItZmFjZS9uZ3gtbWF0ZXJpYWwtdGltZXBpY2tlci1mYWNlLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7VGltZUZvcm1hdHRlclBpcGV9IGZyb20gJy4vcGlwZXMvdGltZS1mb3JtYXR0ZXIucGlwZSc7XHJcbmltcG9ydCB7Tmd4TWF0ZXJpYWxUaW1lcGlja2VyQnV0dG9uQ29tcG9uZW50fSBmcm9tICcuL2NvbXBvbmVudHMvdGltZXBpY2tlci1idXR0b24vbmd4LW1hdGVyaWFsLXRpbWVwaWNrZXItYnV0dG9uLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7VGltZXBpY2tlckRpcmVjdGl2ZX0gZnJvbSAnLi9kaXJlY3RpdmVzL25neC10aW1lcGlja2VyLmRpcmVjdGl2ZSc7XHJcbmltcG9ydCB7T3ZlcmxheURpcmVjdGl2ZX0gZnJvbSAnLi9kaXJlY3RpdmVzL292ZXJsYXkuZGlyZWN0aXZlJztcclxuaW1wb3J0IHtOZ3hNYXRlcmlhbFRpbWVwaWNrZXJFdmVudFNlcnZpY2V9IGZyb20gJy4vc2VydmljZXMvbmd4LW1hdGVyaWFsLXRpbWVwaWNrZXItZXZlbnQuc2VydmljZSc7XHJcbmltcG9ydCB7Tmd4TWF0ZXJpYWxUaW1lcGlja2VyVG9nZ2xlQ29tcG9uZW50fSBmcm9tICcuL2NvbXBvbmVudHMvdGltZXBpY2tlci10b2dnbGUtYnV0dG9uL25neC1tYXRlcmlhbC10aW1lcGlja2VyLXRvZ2dsZS5jb21wb25lbnQnO1xyXG5pbXBvcnQge05neE1hdGVyaWFsVGltZXBpY2tlclRvZ2dsZUljb25EaXJlY3RpdmV9IGZyb20gJy4vZGlyZWN0aXZlcy9uZ3gtbWF0ZXJpYWwtdGltZXBpY2tlci10b2dnbGUtaWNvbi5kaXJlY3RpdmUnO1xyXG5pbXBvcnQge05neE1hdGVyaWFsVGltZXBpY2tlcjEySG91cnNGYWNlQ29tcG9uZW50fSBmcm9tICcuL2NvbXBvbmVudHMvdGltZXBpY2tlci0xMi1ob3Vycy1mYWNlL25neC1tYXRlcmlhbC10aW1lcGlja2VyLTEyLWhvdXJzLWZhY2UuY29tcG9uZW50JztcclxuaW1wb3J0IHtOZ3hNYXRlcmlhbFRpbWVwaWNrZXIyNEhvdXJzRmFjZUNvbXBvbmVudH0gZnJvbSAnLi9jb21wb25lbnRzL3RpbWVwaWNrZXItMjQtaG91cnMtZmFjZS9uZ3gtbWF0ZXJpYWwtdGltZXBpY2tlci0yNC1ob3Vycy1mYWNlLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7Rm9ybXNNb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuaW1wb3J0IHtOZ3hNYXRlcmlhbFRpbWVwaWNrZXJEaWFsQ29tcG9uZW50fSBmcm9tICcuL2NvbXBvbmVudHMvdGltZXBpY2tlci1kaWFsL25neC1tYXRlcmlhbC10aW1lcGlja2VyLWRpYWwuY29tcG9uZW50JztcclxuaW1wb3J0IHtOZ3hNYXRlcmlhbFRpbWVwaWNrZXJEaWFsQ29udHJvbENvbXBvbmVudH0gZnJvbSAnLi9jb21wb25lbnRzL3RpbWVwaWNrZXItZGlhbC1jb250cm9sL25neC1tYXRlcmlhbC10aW1lcGlja2VyLWRpYWwtY29udHJvbC5jb21wb25lbnQnO1xyXG5pbXBvcnQge01pbnV0ZXNGb3JtYXR0ZXJQaXBlfSBmcm9tICcuL3BpcGVzL21pbnV0ZXMtZm9ybWF0dGVyLnBpcGUnO1xyXG5pbXBvcnQge05neE1hdGVyaWFsVGltZXBpY2tlclBlcmlvZENvbXBvbmVudH0gZnJvbSAnLi9jb21wb25lbnRzL3RpbWVwaWNrZXItcGVyaW9kL25neC1tYXRlcmlhbC10aW1lcGlja2VyLXBlcmlvZC5jb21wb25lbnQnO1xyXG5pbXBvcnQge0F1dG9mb2N1c0RpcmVjdGl2ZX0gZnJvbSAnLi9kaXJlY3RpdmVzL2F1dG9mb2N1cy5kaXJlY3RpdmUnO1xyXG5cclxuQE5nTW9kdWxlKHtcclxuICAgIGltcG9ydHM6IFtcclxuICAgICAgICBDb21tb25Nb2R1bGUsXHJcbiAgICAgICAgRm9ybXNNb2R1bGVcclxuICAgIF0sXHJcbiAgICBleHBvcnRzOiBbXHJcbiAgICAgICAgTmd4TWF0ZXJpYWxUaW1lcGlja2VyQ29tcG9uZW50LFxyXG4gICAgICAgIE5neE1hdGVyaWFsVGltZXBpY2tlclRvZ2dsZUNvbXBvbmVudCxcclxuICAgICAgICBUaW1lcGlja2VyRGlyZWN0aXZlLFxyXG4gICAgICAgIE5neE1hdGVyaWFsVGltZXBpY2tlclRvZ2dsZUljb25EaXJlY3RpdmVcclxuICAgIF0sXHJcbiAgICBkZWNsYXJhdGlvbnM6IFtcclxuICAgICAgICBOZ3hNYXRlcmlhbFRpbWVwaWNrZXJDb21wb25lbnQsXHJcbiAgICAgICAgTmd4TWF0ZXJpYWxUaW1lcGlja2VyMjRIb3Vyc0ZhY2VDb21wb25lbnQsXHJcbiAgICAgICAgTmd4TWF0ZXJpYWxUaW1lcGlja2VyMTJIb3Vyc0ZhY2VDb21wb25lbnQsXHJcbiAgICAgICAgTmd4TWF0ZXJpYWxUaW1lcGlja2VyTWludXRlc0ZhY2VDb21wb25lbnQsXHJcbiAgICAgICAgTmd4TWF0ZXJpYWxUaW1lcGlja2VyRmFjZUNvbXBvbmVudCxcclxuICAgICAgICBOZ3hNYXRlcmlhbFRpbWVwaWNrZXJUb2dnbGVDb21wb25lbnQsXHJcbiAgICAgICAgTmd4TWF0ZXJpYWxUaW1lcGlja2VyQnV0dG9uQ29tcG9uZW50LFxyXG4gICAgICAgIE5neE1hdGVyaWFsVGltZXBpY2tlckRpYWxDb21wb25lbnQsXHJcbiAgICAgICAgTmd4TWF0ZXJpYWxUaW1lcGlja2VyRGlhbENvbnRyb2xDb21wb25lbnQsXHJcbiAgICAgICAgTmd4TWF0ZXJpYWxUaW1lcGlja2VyUGVyaW9kQ29tcG9uZW50LFxyXG4gICAgICAgIFN0eWxlU2FuaXRpemVyUGlwZSxcclxuICAgICAgICBUaW1lRm9ybWF0dGVyUGlwZSxcclxuICAgICAgICBUaW1lcGlja2VyRGlyZWN0aXZlLFxyXG4gICAgICAgIE92ZXJsYXlEaXJlY3RpdmUsXHJcbiAgICAgICAgTmd4TWF0ZXJpYWxUaW1lcGlja2VyVG9nZ2xlSWNvbkRpcmVjdGl2ZSxcclxuICAgICAgICBBdXRvZm9jdXNEaXJlY3RpdmUsXHJcbiAgICAgICAgTWludXRlc0Zvcm1hdHRlclBpcGVcclxuICAgIF1cclxufSlcclxuZXhwb3J0IGNsYXNzIE5neE1hdGVyaWFsVGltZXBpY2tlck1vZHVsZSB7XHJcbiAgICBzdGF0aWMgZm9yUm9vdCgpOiBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBuZ01vZHVsZTogTmd4TWF0ZXJpYWxUaW1lcGlja2VyTW9kdWxlLFxyXG4gICAgICAgICAgICBwcm92aWRlcnM6IFtOZ3hNYXRlcmlhbFRpbWVwaWNrZXJTZXJ2aWNlLCBOZ3hNYXRlcmlhbFRpbWVwaWNrZXJFdmVudFNlcnZpY2VdXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG4iXX0=