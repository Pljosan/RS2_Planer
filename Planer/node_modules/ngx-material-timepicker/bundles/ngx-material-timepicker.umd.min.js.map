{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://ngx-material-timepicker/src/app/material-timepicker/models/time-period.enum.ts","ng://ngx-material-timepicker/src/app/material-timepicker/models/time-format.enum.ts","ng://ngx-material-timepicker/src/app/material-timepicker/services/time-adapter.ts","ng://ngx-material-timepicker/src/app/material-timepicker/services/ngx-material-timepicker.service.ts","ng://ngx-material-timepicker/src/app/material-timepicker/models/time-unit.enum.ts","ng://ngx-material-timepicker/src/app/material-timepicker/services/ngx-material-timepicker-event.service.ts","ng://ngx-material-timepicker/src/app/material-timepicker/timepicker-time.namespace.ts","ng://ngx-material-timepicker/src/app/material-timepicker/ngx-material-timepicker.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/style-sanitizer.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-minutes-face/ngx-material-timepicker-minutes-face.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-face/ngx-material-timepicker-face.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/time-formatter.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-button/ngx-material-timepicker-button.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/ngx-timepicker.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/overlay.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/ngx-material-timepicker-toggle-icon.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-toggle-button/ngx-material-timepicker-toggle.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-hours-face/ngx-material-timepicker-hours-face.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-12-hours-face/ngx-material-timepicker-12-hours-face.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-24-hours-face/ngx-material-timepicker-24-hours-face.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-dial/ngx-material-timepicker-dial.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-dial-control/ngx-material-timepicker-dial-control.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/minutes-formatter.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-period/ngx-material-timepicker-period.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/autofocus.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/ngx-material-timepicker.module.ts"],"names":["extendStatics","Object","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","AM","PM","TWELVE","TWENTY_FOUR","moment","_moment","TimeAdapter","formatTime","time","format","timeFormat","TimeFormat","convertTimeToMoment","isTimeAvailable","min","max","granularity","convertedTime","isAfter","isSameOrAfter","isBefore","isSameOrBefore","isBetween","formatHour","currentHour","period","hour","TimePeriod","moment_","DEFAULT_HOUR","angle","DEFAULT_MINUTE","NgxMaterialTimepickerService","hourSubject","BehaviorSubject","minuteSubject","periodSubject","defineProperty","next","asObservable","minute","defaultTime","toDate","isValid","getHours","getMinutes","substr","toUpperCase","resetTime","getFullTime","getValue","Injectable","HOUR","MINUTE","TimepickerTime","NgxMaterialTimepickerEventService","backdropClickSubject","Subject","keydownEventSubject","dispatchEvent","event","type","Error","ENTER","LEAVE","ESCAPE","NgxMaterialTimepickerComponent","timepickerService","eventService","_this","timeUnit","TimeUnit","activeTimeUnit","isOpened","isEsc","timeSet","EventEmitter","closed","subscriptions","push","merge","backdropClick","keydownEvent","pipe","filter","e","keyCode","subscribe","close","_minutesGap","gap","Math","floor","timepickerInput","disabled","ngOnInit","selectedHour","selectedMinute","selectedPeriod","registerInput","input","onHourChange","onMinuteChange","changePeriod","changeTimeUnit","unit","setTime","setDefaultTime","open","animationState","AnimationState","animationDone","phaseName","toState","onKeydown","stopPropagation","ngOnDestroy","forEach","subscription","unsubscribe","Component","args","selector","template","animations","trigger","transition","style","transform","animate","opacity","providers","Input","Output","HostListener","StyleSanitizerPipe","domSanitizer","value","bypassSecurityTrustStyle","Pipe","name","DomSanitizer","fill","map","v","disableHours","hours","config","currentTime","minutes","disableMinutes","hour_1","NgxMaterialTimepickerMinutesFaceComponent","minutesList","minuteChange","ngOnChanges","changes","currentValue","minutesGap","minTime","maxTime","CLOCK_HAND_STYLES","height","top","NgxMaterialTimepickerFaceComponent","innerClockFaceSize","timeChange","timeSelected","ngAfterViewInit","setClockHandPosition","addTouchEvents","faceTimeChanges","selectedTimeChanges","selectedTime","faceTime","find","setTimeout","selectAvailableTime","trackByTime","_","onMousedown","preventDefault","isStarted","selectTime","MouseEvent","x0","y0","x","y","currentAngle","clockFaceCords","clockFace","nativeElement","getBoundingClientRect","centerX","left","width","centerY","arctangent","atan","abs","clientX","clientY","PI","circleAngle","isInnerClockChosen","isInnerClockFace","angleStep","roundedAngle","roundAngle","val","onMouseup","isHourSelected","isClockFaceDisabled","isMinuteSelected","removeTouchEvents","touchStartHandler","bind","touchEndHandler","addEventListener","removeEventListener","decreaseClockHand","increaseClockHand","clockHand","every","availableTime","sqrt","pow","ViewChild","step","round","TimeFormatterPipe","undefined","moment.utc","NgxMaterialTimepickerButtonComponent","VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","TimepickerDirective","multi","elementRef","_format","_value","timepickerSubscriptions","onTouched","onChange","_min","_max","updateInputValue","console","warn","picker","registerTimepicker","_timepicker","onInput","onClick","disableClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","Directive","host","[disabled]","(input)","(blur)","ElementRef","OverlayDirective","NgxMaterialTimepickerToggleIconDirective","NgxMaterialTimepickerToggleComponent","_disabled","timepicker","ContentChild","NgxMaterialTimepickerHoursFace","hourChange","hourSelected","hoursList","NgxMaterialTimepicker12HoursFaceComponent","_super","tslib_1.__extends","NgxMaterialTimepicker24HoursFaceComponent","ngAfterContentInit","NgxMaterialTimepickerDialComponent","periodChanged","timeUnitChanged","hourChanged","minuteChanged","changeHour","changeMinute","changeDetection","ChangeDetectionStrategy","OnPush","NgxMaterialTimepickerDialControlComponent","timeChanged","timeList","isEditable","firstChange","saveTimeAndChangeTimeUnit","previousTime","updateTime","onKeyDown","char","String","fromCharCode","isInputAllowed","nextTime","test","isTimeUnavailable","isTimeDisabledToChange","changeTimeByArrow","some","ctrlKey","metaKey","MinutesFormatterPipe","NgxMaterialTimepickerPeriodComponent","timePeriod","isPeriodAvailable","isSwitchPeriodAvailable","getDisabledTimeByPeriod","sequence","AutofocusDirective","element","document","activeElement","isFocusActive","focus","Optional","Inject","DOCUMENT","NgxMaterialTimepickerModule","forRoot","ngModule","NgModule","imports","CommonModule","FormsModule","exports","declarations"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export enum TimePeriod {\r\n    AM = 'AM',\r\n    PM = 'PM'\r\n}\r\n","export enum TimeFormat {\r\n    TWELVE = 'hh:mm a',\r\n    TWENTY_FOUR = 'HH:mm'\r\n}\r\n","import * as _moment from 'moment';\r\nimport {Moment, unitOfTime} from 'moment';\r\nimport {TimeFormat} from '../models/time-format.enum';\r\nimport {TimePeriod} from '../models/time-period.enum';\r\n\r\nconst moment = _moment;\r\n\r\nexport class TimeAdapter {\r\n\r\n    static formatTime(time: string, format = 12): string {\r\n        const timeFormat = format === 24 ? TimeFormat.TWENTY_FOUR : TimeFormat.TWELVE;\r\n        return moment(time, TimeFormat.TWELVE).format(timeFormat);\r\n    }\r\n\r\n    static convertTimeToMoment(time: string): Moment {\r\n        return moment(time, TimeFormat.TWELVE);\r\n    }\r\n\r\n    static isTimeAvailable(time: string, min?: Moment, max?: Moment, granularity?: unitOfTime.StartOf): boolean {\r\n        if (!time) {\r\n            return;\r\n        }\r\n        const convertedTime = this.convertTimeToMoment(time);\r\n        const isAfter = (min && !max)\r\n            && convertedTime.isSameOrAfter(min, granularity);\r\n        const isBefore = (max && !min)\r\n            && convertedTime.isSameOrBefore(max, granularity);\r\n        const isBetween = (min && max)\r\n            && convertedTime.isBetween(min, max, granularity, '[]');\r\n        const isAvailable = !min && !max;\r\n\r\n        return isAfter || isBefore || isBetween || isAvailable;\r\n    }\r\n\r\n    /***\r\n     *  Format hour according to time format (12 or 24)\r\n     */\r\n    static formatHour(currentHour: number, format: number, period: TimePeriod): number {\r\n        if (format === 24) {\r\n            return currentHour;\r\n        }\r\n        let hour = period === TimePeriod.AM ? currentHour : currentHour + 12;\r\n\r\n        if (period === TimePeriod.AM && hour === 12) {\r\n            return 0;\r\n        } else if (period === TimePeriod.PM && hour === 24) {\r\n            return 12;\r\n        }\r\n        return hour;\r\n    }\r\n\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {ClockFaceTime} from '../models/clock-face-time.interface';\r\nimport {BehaviorSubject, Observable} from 'rxjs';\r\nimport {TimePeriod} from '../models/time-period.enum';\r\nimport * as moment_ from 'moment';\r\nimport {TimeFormat} from '../models/time-format.enum';\r\nimport {TimeAdapter} from './time-adapter';\r\n\r\nconst moment = moment_;\r\n\r\nconst DEFAULT_HOUR: ClockFaceTime = {\r\n    time: 12,\r\n    angle: 360\r\n};\r\nconst DEFAULT_MINUTE: ClockFaceTime = {\r\n    time: 0,\r\n    angle: 360\r\n};\r\n\r\n@Injectable()\r\nexport class NgxMaterialTimepickerService {\r\n\r\n    private hourSubject = new BehaviorSubject<ClockFaceTime>(DEFAULT_HOUR);\r\n    private minuteSubject = new BehaviorSubject<ClockFaceTime>(DEFAULT_MINUTE);\r\n    private periodSubject = new BehaviorSubject<TimePeriod>(TimePeriod.AM);\r\n\r\n    set hour(hour: ClockFaceTime) {\r\n        this.hourSubject.next(hour);\r\n    }\r\n\r\n    get selectedHour(): Observable<ClockFaceTime> {\r\n        return this.hourSubject.asObservable();\r\n    }\r\n\r\n    set minute(minute: ClockFaceTime) {\r\n        this.minuteSubject.next(minute);\r\n    }\r\n\r\n    get selectedMinute(): Observable<ClockFaceTime> {\r\n        return this.minuteSubject.asObservable();\r\n    }\r\n\r\n    set period(period: TimePeriod) {\r\n        this.periodSubject.next(period);\r\n    }\r\n\r\n    get selectedPeriod(): Observable<TimePeriod> {\r\n        return this.periodSubject.asObservable();\r\n    }\r\n\r\n    set defaultTime(time: string) {\r\n        const defaultTime = moment(time, TimeFormat.TWENTY_FOUR).toDate();\r\n\r\n        if (moment(defaultTime).isValid()) {\r\n            this.hour = {...DEFAULT_HOUR, time: defaultTime.getHours()};\r\n            this.minute = {...DEFAULT_MINUTE, time: defaultTime.getMinutes()};\r\n            this.period = <TimePeriod>time.substr(time.length - 2).toUpperCase();\r\n        } else {\r\n            this.resetTime();\r\n        }\r\n    }\r\n\r\n    getFullTime(format: number): string {\r\n        const hour = this.hourSubject.getValue().time;\r\n        const minute = this.minuteSubject.getValue().time;\r\n        const period = format === 12 ? this.periodSubject.getValue() : '';\r\n\r\n        return TimeAdapter.formatTime(`${hour}:${minute} ${period}`, format);\r\n    }\r\n\r\n    private resetTime(): void {\r\n        this.hour = {...DEFAULT_HOUR};\r\n        this.minute = {...DEFAULT_MINUTE};\r\n        this.period = TimePeriod.AM;\r\n    }\r\n}\r\n","export enum TimeUnit {\r\n    HOUR,\r\n    MINUTE\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {Observable, Subject} from 'rxjs';\r\n\r\n@Injectable()\r\nexport class NgxMaterialTimepickerEventService {\r\n\r\n    private backdropClickSubject: Subject<MouseEvent> = new Subject();\r\n    private keydownEventSubject: Subject<KeyboardEvent> = new Subject();\r\n\r\n    get backdropClick(): Observable<MouseEvent> {\r\n        return this.backdropClickSubject.asObservable();\r\n    }\r\n\r\n    get keydownEvent(): Observable<KeyboardEvent> {\r\n        return this.keydownEventSubject.asObservable();\r\n    }\r\n\r\n    dispatchEvent(event: KeyboardEvent | MouseEvent): void {\r\n        switch (event.type) {\r\n            case 'click':\r\n                this.backdropClickSubject.next(<MouseEvent>event);\r\n                break;\r\n            case 'keydown':\r\n                this.keydownEventSubject.next(<KeyboardEvent>event);\r\n                break;\r\n            default:\r\n                throw new Error('no such event type');\r\n        }\r\n    }\r\n\r\n}\r\n","import {ClockFaceTime} from './models/clock-face-time.interface';\r\nimport * as _moment from 'moment';\r\nimport {TimeAdapter} from './services/time-adapter';\r\nimport {TimeFormat} from './models/time-format.enum';\r\nimport {DisabledTimeConfig} from './models/disabled-time-config.interface';\r\n\r\nconst moment = _moment;\r\n\r\nexport namespace TimepickerTime {\r\n\r\n    export function getHours(format: number): ClockFaceTime[] {\r\n        return Array(format).fill(1).map((v, i) => {\r\n            const angleStep = 30;\r\n            const time = v + i;\r\n            const angle = angleStep * time;\r\n            return {time: time === 24 ? 0 : time, angle};\r\n        });\r\n    }\r\n\r\n    export function disableHours(hours: ClockFaceTime[], config: DisabledTimeConfig): ClockFaceTime[] {\r\n        if (config.min || config.max) {\r\n\r\n            return hours.map(value => {\r\n                const hour = config.format === 24 ? value.time : TimeAdapter.formatHour(+value.time, config.format, config.period);\r\n                const currentTime = moment().hour(+hour).format(TimeFormat.TWELVE);\r\n\r\n                return {\r\n                    ...value,\r\n                    disabled: !TimeAdapter.isTimeAvailable(currentTime, config.min, config.max, 'hours')\r\n                };\r\n            });\r\n        }\r\n        return hours;\r\n    }\r\n\r\n    export function getMinutes(gap = 1): ClockFaceTime[] {\r\n        const minutesCount = 60;\r\n        const angleStep = 360 / minutesCount;\r\n        const minutes = [];\r\n\r\n        for (let i = 0; i < minutesCount; i++) {\r\n            const angle = angleStep * i;\r\n            if (i % gap === 0) {\r\n                minutes.push({time: i, angle: angle !== 0 ? angle : 360});\r\n            }\r\n        }\r\n        return minutes;\r\n    }\r\n\r\n    export function disableMinutes(minutes: ClockFaceTime[], selectedHour: number, config: DisabledTimeConfig) {\r\n        if (config.min || config.max) {\r\n\r\n            const hour = TimeAdapter.formatHour(selectedHour, config.format, config.period);\r\n\r\n            return minutes.map(value => {\r\n                const currentTime = moment().hour(hour).minute(+value.time).format(TimeFormat.TWELVE);\r\n\r\n                return {\r\n                    ...value,\r\n                    disabled: !TimeAdapter.isTimeAvailable(currentTime, config.min, config.max, 'minutes')\r\n                };\r\n            });\r\n        }\r\n        return minutes;\r\n    }\r\n}\r\n","import {Component, EventEmitter, HostListener, Input, OnDestroy, OnInit, Output, TemplateRef} from '@angular/core';\r\nimport {ClockFaceTime} from './models/clock-face-time.interface';\r\nimport {TimePeriod} from './models/time-period.enum';\r\nimport {merge, Subscription} from 'rxjs';\r\nimport {NgxMaterialTimepickerService} from './services/ngx-material-timepicker.service';\r\nimport {TimeUnit} from './models/time-unit.enum';\r\nimport {animate, AnimationEvent, style, transition, trigger} from '@angular/animations';\r\nimport {NgxMaterialTimepickerEventService} from './services/ngx-material-timepicker-event.service';\r\nimport {filter} from 'rxjs/operators';\r\nimport {TimepickerDirective} from './directives/ngx-timepicker.directive';\r\nimport {Moment} from 'moment';\r\n\r\nexport enum AnimationState {\r\n    ENTER = 'enter',\r\n    LEAVE = 'leave'\r\n}\r\n\r\nconst ESCAPE = 27;\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker',\r\n    templateUrl: './ngx-material-timepicker.component.html',\r\n    styleUrls: ['./ngx-material-timepicker.component.scss'],\r\n    animations: [\r\n        trigger('timepicker', [\r\n            transition(`* => ${AnimationState.ENTER}`, [\r\n                style({transform: 'translateY(-30%)'}),\r\n                animate('0.2s ease-out', style({transform: 'translateY(0)'}))\r\n            ]),\r\n            transition(`${AnimationState.ENTER} => ${AnimationState.LEAVE}`, [\r\n                style({transform: 'translateY(0)', opacity: 1}),\r\n                animate('0.2s ease-out', style({transform: 'translateY(-30%)', opacity: 0}))\r\n            ])\r\n        ])\r\n    ],\r\n    providers: [NgxMaterialTimepickerService]\r\n})\r\nexport class NgxMaterialTimepickerComponent implements OnInit, OnDestroy {\r\n\r\n    selectedHour: ClockFaceTime;\r\n    selectedMinute: ClockFaceTime;\r\n    selectedPeriod: TimePeriod;\r\n\r\n    timeUnit = TimeUnit;\r\n    activeTimeUnit = TimeUnit.HOUR;\r\n\r\n    isOpened = false;\r\n    animationState: AnimationState;\r\n\r\n    @Input() cancelBtnTmpl: TemplateRef<Node>;\r\n    @Input() confirmBtnTmpl: TemplateRef<Node>;\r\n    @Input('ESC') isEsc = true;\r\n    @Input() enableKeyboardInput: boolean;\r\n\r\n    @Input()\r\n    set minutesGap(gap: number) {\r\n        gap = Math.floor(gap);\r\n        this._minutesGap = gap <= 59 ? gap : 1;\r\n    }\r\n\r\n    get minutesGap(): number {\r\n        return this._minutesGap;\r\n    }\r\n\r\n    @Output() timeSet = new EventEmitter<string>();\r\n    @Output() closed = new EventEmitter<null>();\r\n\r\n    private _minutesGap: number;\r\n    private timepickerInput: TimepickerDirective;\r\n    private subscriptions: Subscription[] = [];\r\n\r\n    constructor(private timepickerService: NgxMaterialTimepickerService,\r\n                private eventService: NgxMaterialTimepickerEventService) {\r\n\r\n        this.subscriptions.push(merge(this.eventService.backdropClick,\r\n            this.eventService.keydownEvent.pipe(filter(e => e.keyCode === ESCAPE && this.isEsc)))\r\n            .subscribe(() => this.close()));\r\n\r\n    }\r\n\r\n    get minTime(): string | Moment {\r\n        return this.timepickerInput && this.timepickerInput.min;\r\n    }\r\n\r\n    get maxTime(): string | Moment {\r\n        return this.timepickerInput && this.timepickerInput.max;\r\n    }\r\n\r\n    get disabled(): boolean {\r\n        return this.timepickerInput && this.timepickerInput.disabled;\r\n    }\r\n\r\n    get format(): number {\r\n        return this.timepickerInput && this.timepickerInput.format;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.subscriptions.push(this.timepickerService.selectedHour\r\n            .subscribe(hour => this.selectedHour = hour));\r\n\r\n        this.subscriptions.push(this.timepickerService.selectedMinute\r\n            .subscribe(minute => this.selectedMinute = minute));\r\n\r\n        this.subscriptions.push(this.timepickerService.selectedPeriod\r\n            .subscribe(period => this.selectedPeriod = period));\r\n    }\r\n\r\n    /***\r\n     * Register an input with this timepicker.\r\n     * input - The timepicker input to register with this timepicker\r\n     */\r\n    registerInput(input: TimepickerDirective): void {\r\n        if (this.timepickerInput) {\r\n            throw Error('A Timepicker can only be associated with a single input.');\r\n        }\r\n        this.timepickerInput = input;\r\n    }\r\n\r\n    onHourChange(hour: ClockFaceTime): void {\r\n        this.timepickerService.hour = hour;\r\n    }\r\n\r\n    onMinuteChange(minute: ClockFaceTime): void {\r\n        this.timepickerService.minute = minute;\r\n    }\r\n\r\n    changePeriod(period: TimePeriod): void {\r\n        this.timepickerService.period = period;\r\n    }\r\n\r\n    changeTimeUnit(unit: TimeUnit) {\r\n        this.activeTimeUnit = unit;\r\n    }\r\n\r\n    setTime() {\r\n        this.timeSet.next(this.timepickerService.getFullTime(this.format));\r\n        this.close();\r\n    }\r\n\r\n    setDefaultTime(time: string): void {\r\n        this.timepickerService.defaultTime = time;\r\n    }\r\n\r\n    open() {\r\n        this.isOpened = true;\r\n        this.animationState = AnimationState.ENTER;\r\n    }\r\n\r\n    close() {\r\n        this.animationState = AnimationState.LEAVE;\r\n    }\r\n\r\n    animationDone(event: AnimationEvent): void {\r\n        if (event.phaseName === 'done' && event.toState === AnimationState.LEAVE) {\r\n            this.isOpened = false;\r\n            this.activeTimeUnit = TimeUnit.HOUR;\r\n            this.closed.next();\r\n        }\r\n    }\r\n\r\n    @HostListener('keydown', ['$event'])\r\n    onKeydown(e: KeyboardEvent) {\r\n        this.eventService.dispatchEvent(e);\r\n        e.stopPropagation();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.subscriptions.forEach(subscription => subscription.unsubscribe());\r\n    }\r\n}\r\n","import {Pipe, PipeTransform} from '@angular/core';\r\nimport {DomSanitizer} from '@angular/platform-browser';\r\n\r\n@Pipe({\r\n    name: 'styleSanitizer'\r\n})\r\nexport class StyleSanitizerPipe implements PipeTransform {\r\n\r\n    constructor(private domSanitizer: DomSanitizer) {\r\n    }\r\n\r\n    transform(value: string): any {\r\n        if (!value) {\r\n            return value;\r\n        }\r\n        return this.domSanitizer.bypassSecurityTrustStyle(value);\r\n    }\r\n\r\n}\r\n","import {Component, EventEmitter, Input, OnChanges, Output, SimpleChanges} from '@angular/core';\r\nimport {ClockFaceTime} from '../../models/clock-face-time.interface';\r\nimport {TimeUnit} from '../../models/time-unit.enum';\r\nimport {TimePeriod} from '../../models/time-period.enum';\r\nimport {Moment} from 'moment';\r\nimport {TimepickerTime} from '../../timepicker-time.namespace';\r\n\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-minutes-face',\r\n    templateUrl: './ngx-material-timepicker-minutes-face.component.html'\r\n})\r\nexport class NgxMaterialTimepickerMinutesFaceComponent implements OnChanges {\r\n\r\n    minutesList: ClockFaceTime[] = [];\r\n    timeUnit = TimeUnit;\r\n\r\n    @Input() selectedMinute: ClockFaceTime;\r\n    @Input() selectedHour: number;\r\n    @Input() period: TimePeriod;\r\n    @Input() minTime: Moment;\r\n    @Input() maxTime: Moment;\r\n    @Input() format: number;\r\n    @Input() minutesGap: number;\r\n\r\n    @Output() minuteChange = new EventEmitter<ClockFaceTime>();\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes['period'] && changes['period'].currentValue) {\r\n            const minutes = TimepickerTime.getMinutes(this.minutesGap);\r\n            this.minutesList = TimepickerTime.disableMinutes(minutes, this.selectedHour, {\r\n                min: this.minTime,\r\n                max: this.maxTime,\r\n                format: this.format,\r\n                period: this.period\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\n","import {\r\n    AfterViewInit,\r\n    Component,\r\n    ElementRef,\r\n    EventEmitter,\r\n    HostListener,\r\n    Input,\r\n    OnChanges,\r\n    OnDestroy,\r\n    Output,\r\n    SimpleChanges,\r\n    ViewChild\r\n} from '@angular/core';\r\nimport {ClockFaceTime} from '../../models/clock-face-time.interface';\r\nimport {TimeUnit} from '../../models/time-unit.enum';\r\n\r\nconst CLOCK_HAND_STYLES = {\r\n    small: {\r\n        height: '75px',\r\n        top: 'calc(50% - 75px)'\r\n    },\r\n    large: {\r\n        height: '103px',\r\n        top: 'calc(50% - 103px)'\r\n    }\r\n};\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-face',\r\n    templateUrl: './ngx-material-timepicker-face.component.html',\r\n    styleUrls: ['./ngx-material-timepicker-face.component.scss']\r\n})\r\nexport class NgxMaterialTimepickerFaceComponent implements AfterViewInit, OnChanges, OnDestroy {\r\n\r\n    timeUnit = TimeUnit;\r\n\r\n    isClockFaceDisabled: boolean;\r\n    innerClockFaceSize = 85;\r\n\r\n    @Input() faceTime: ClockFaceTime[];\r\n    @Input() selectedTime: ClockFaceTime;\r\n    @Input() unit: TimeUnit;\r\n    @Input() format: number;\r\n    @Input() minutesGap: number;\r\n\r\n    @Output() timeChange = new EventEmitter<ClockFaceTime>();\r\n    @Output() timeSelected = new EventEmitter<null>();\r\n\r\n    @ViewChild('clockFace') clockFace: ElementRef;\r\n    @ViewChild('clockHand') clockHand: ElementRef;\r\n\r\n    private isStarted: boolean;\r\n    private touchStartHandler: () => any;\r\n    private touchEndHandler: () => any;\r\n\r\n    ngAfterViewInit() {\r\n        this.setClockHandPosition();\r\n        this.addTouchEvents();\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        const faceTimeChanges = changes['faceTime'];\r\n        const selectedTimeChanges = changes['selectedTime'];\r\n\r\n        if ((faceTimeChanges && faceTimeChanges.currentValue)\r\n            && (selectedTimeChanges && selectedTimeChanges.currentValue)) {\r\n            /* Set time according to passed an input value */\r\n            this.selectedTime = this.faceTime.find(time => time.time === this.selectedTime.time);\r\n        }\r\n        if (selectedTimeChanges && selectedTimeChanges.currentValue) {\r\n            this.setClockHandPosition();\r\n        }\r\n        if (faceTimeChanges && faceTimeChanges.currentValue) {\r\n            // To avoid an error ExpressionChangedAfterItHasBeenCheckedError\r\n            setTimeout(() => this.selectAvailableTime());\r\n        }\r\n    }\r\n\r\n\r\n    trackByTime(_, time: ClockFaceTime): string | number {\r\n        return time.time;\r\n    }\r\n\r\n    @HostListener('mousedown', ['$event'])\r\n    onMousedown(e: MouseEvent | TouchEvent) {\r\n        e.preventDefault();\r\n        this.isStarted = true;\r\n    }\r\n\r\n    @HostListener('click', ['$event'])\r\n    @HostListener('touchmove', ['$event.changedTouches[0]'])\r\n    @HostListener('touchend', ['$event.changedTouches[0]'])\r\n    @HostListener('mousemove', ['$event'])\r\n    selectTime(e: MouseEvent | Touch): void {\r\n\r\n        if (!this.isStarted && (e instanceof MouseEvent && e.type !== 'click')) {\r\n            return;\r\n        }\r\n        const clockFaceCords = this.clockFace.nativeElement.getBoundingClientRect();\r\n\r\n        /* Get x0 and y0 of the circle */\r\n        const centerX = clockFaceCords.left + clockFaceCords.width / 2;\r\n        const centerY = clockFaceCords.top + clockFaceCords.height / 2;\r\n        /* Counting the arctangent and convert it to from radian to deg */\r\n        const arctangent = Math.atan(Math.abs(e.clientX - centerX) / Math.abs(e.clientY - centerY)) * 180 / Math.PI;\r\n        /* Get angle according to quadrant */\r\n        const circleAngle = countAngleByCords(centerX, centerY, e.clientX, e.clientY, arctangent);\r\n        /* Check if selected time from the inner clock face (24 hours format only) */\r\n        const isInnerClockChosen = this.format && this.isInnerClockFace(centerX, centerY, e.clientX, e.clientY);\r\n        /* Round angle according to angle step */\r\n        const angleStep = this.unit === TimeUnit.MINUTE ? 6 : 30;\r\n        const roundedAngle = isInnerClockChosen\r\n            ? roundAngle(circleAngle, angleStep) + 360\r\n            : roundAngle(circleAngle, angleStep);\r\n\r\n        const selectedTime = this.faceTime.find(val => val.angle === roundedAngle);\r\n\r\n        if (selectedTime && !selectedTime.disabled) {\r\n            this.timeChange.next(selectedTime);\r\n\r\n            /* To let know whether user ended interaction with clock face */\r\n            if (!this.isStarted) {\r\n                this.timeSelected.next();\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    @HostListener('mouseup', ['$event'])\r\n    onMouseup(e: MouseEvent | TouchEvent) {\r\n        e.preventDefault();\r\n        this.isStarted = false;\r\n    }\r\n\r\n    isHourSelected(hour: number): boolean {\r\n        return (hour === this.selectedTime.time) && !this.isClockFaceDisabled;\r\n    }\r\n\r\n    isMinuteSelected(minute: number): boolean {\r\n        return ((this.selectedTime.time === minute) && (minute % (this.minutesGap || 5) === 0)) && !this.isClockFaceDisabled;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.removeTouchEvents();\r\n    }\r\n\r\n    private addTouchEvents(): void {\r\n        this.touchStartHandler = this.onMousedown.bind(this);\r\n        this.touchEndHandler = this.onMouseup.bind(this);\r\n\r\n        this.clockFace.nativeElement.addEventListener('touchstart', this.touchStartHandler);\r\n        this.clockFace.nativeElement.addEventListener('touchend', this.touchEndHandler);\r\n    }\r\n\r\n    private removeTouchEvents(): void {\r\n        this.clockFace.nativeElement.removeEventListener('touchstart', this.touchStartHandler);\r\n        this.clockFace.nativeElement.removeEventListener('touchend', this.touchEndHandler);\r\n    }\r\n\r\n    private setClockHandPosition(): void {\r\n        if (this.format === 24) {\r\n            if (this.selectedTime.time > 12 || this.selectedTime.time === 0) {\r\n                this.decreaseClockHand();\r\n            } else {\r\n                this.increaseClockHand();\r\n            }\r\n        }\r\n\r\n        this.clockHand.nativeElement.style.transform = `rotate(${this.selectedTime.angle}deg)`;\r\n    }\r\n\r\n    private selectAvailableTime(): void {\r\n        const currentTime = this.faceTime.find(time => this.selectedTime.time === time.time);\r\n        this.isClockFaceDisabled = this.faceTime.every(time => time.disabled);\r\n\r\n        if ((currentTime && currentTime.disabled) && !this.isClockFaceDisabled) {\r\n            const availableTime = this.faceTime.find(time => !time.disabled);\r\n\r\n            this.timeChange.next(availableTime);\r\n        }\r\n    }\r\n\r\n    private isInnerClockFace(x0: number, y0: number, x: number, y: number): boolean {\r\n        /* Detect whether time from the inner clock face or not (24 format only) */\r\n        return Math.sqrt(Math.pow(x - x0, 2) + Math.pow(y - y0, 2)) < this.innerClockFaceSize;\r\n    }\r\n\r\n    private decreaseClockHand(): void {\r\n        this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.small.height;\r\n        this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.small.top;\r\n    }\r\n\r\n    private increaseClockHand(): void {\r\n        this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.large.height;\r\n        this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.large.top;\r\n    }\r\n}\r\n\r\nfunction roundAngle(angle: number, step: number): number {\r\n    return Math.round(angle / step) * step;\r\n}\r\n\r\nfunction countAngleByCords(x0: number, y0: number, x: number, y: number, currentAngle: number): number {\r\n    if (y > y0 && x >= x0) {// II quarter\r\n        return 180 - currentAngle;\r\n    } else if (y > y0 && x < x0) {// III quarter\r\n        return 180 + currentAngle;\r\n    } else if (y < y0 && x < x0) {// IV quarter\r\n        return 360 - currentAngle;\r\n    } else {// I quarter\r\n        return currentAngle;\r\n    }\r\n}\r\n","import {Pipe, PipeTransform} from '@angular/core';\r\nimport * as moment from 'moment';\r\nimport {TimeUnit} from '../models/time-unit.enum';\r\n\r\n@Pipe({\r\n    name: 'timeFormatter'\r\n})\r\nexport class TimeFormatterPipe implements PipeTransform {\r\n\r\n    transform(time: number, timeUnit: TimeUnit): any {\r\n        if (time === undefined) {\r\n            return time;\r\n        }\r\n        switch (timeUnit) {\r\n            case TimeUnit.HOUR:\r\n                return moment.utc(time * 3600 * 1000).format('HH');\r\n            case TimeUnit.MINUTE:\r\n                return moment.utc(time * 60 * 1000).format('mm');\r\n            default:\r\n                throw new Error('no such time unit');\r\n        }\r\n    }\r\n\r\n}\r\n","import {Component} from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-button',\r\n    templateUrl: './ngx-material-timepicker-button.component.html',\r\n    styleUrls: ['./ngx-material-timepicker-button.component.scss']\r\n})\r\nexport class NgxMaterialTimepickerButtonComponent {\r\n}\r\n","import {\r\n    Directive,\r\n    ElementRef,\r\n    forwardRef,\r\n    HostListener,\r\n    Input,\r\n    OnChanges,\r\n    OnDestroy,\r\n    SimpleChanges\r\n} from '@angular/core';\r\nimport {NgxMaterialTimepickerComponent} from '../ngx-material-timepicker.component';\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\r\nimport {Subscription} from 'rxjs';\r\nimport {Moment} from 'moment';\r\nimport {TimeAdapter} from '../services/time-adapter';\r\n\r\nconst VALUE_ACCESSOR = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => TimepickerDirective),\r\n    multi: true\r\n};\r\n\r\n@Directive({\r\n    selector: '[ngxTimepicker]',\r\n    providers: [VALUE_ACCESSOR],\r\n    host: {\r\n        '[disabled]': 'disabled',\r\n        '(input)': 'onInput($event.target.value)',\r\n        '(blur)': 'onTouched()',\r\n    },\r\n})\r\nexport class TimepickerDirective implements ControlValueAccessor, OnDestroy, OnChanges {\r\n\r\n    @Input()\r\n    set format(value: number) {\r\n        this._format = value === 24 ? 24 : 12;\r\n    }\r\n\r\n    get format(): number {\r\n        return this._format;\r\n    }\r\n\r\n    private _format = 12;\r\n\r\n    @Input()\r\n    set min(value: string | Moment) {\r\n        if (typeof value === 'string') {\r\n            this._min = TimeAdapter.convertTimeToMoment(value);\r\n            return;\r\n        }\r\n        this._min = value;\r\n    }\r\n\r\n    get min(): string | Moment {\r\n        return this._min;\r\n    }\r\n\r\n    private _min: string | Moment;\r\n\r\n    @Input()\r\n    set max(value: string | Moment) {\r\n        if (typeof value === 'string') {\r\n            this._max = TimeAdapter.convertTimeToMoment(value);\r\n            return;\r\n        }\r\n        this._max = value;\r\n    }\r\n\r\n    get max(): string | Moment {\r\n        return this._max;\r\n    }\r\n\r\n    private _max: string | Moment;\r\n\r\n    @Input()\r\n    set value(value: string) {\r\n        if (!value) {\r\n            this._value = '';\r\n            this.updateInputValue();\r\n            return;\r\n        }\r\n        const time = TimeAdapter.formatTime(value, this._format);\r\n        if (TimeAdapter.isTimeAvailable(time, <Moment>this._min, <Moment>this._max, 'minutes')) {\r\n            this._value = time;\r\n            this.updateInputValue();\r\n            return;\r\n        }\r\n        console.warn('Selected time doesn\\'t match min or max value');\r\n    }\r\n\r\n    get value(): string {\r\n        return this._value;\r\n    }\r\n\r\n    private _value = '';\r\n\r\n    @Input('ngxTimepicker')\r\n    set timepicker(picker: NgxMaterialTimepickerComponent) {\r\n        this.registerTimepicker(picker);\r\n    }\r\n    private _timepicker: NgxMaterialTimepickerComponent;\r\n\r\n    @Input() disabled: boolean;\r\n    @Input() disableClick: boolean;\r\n    private timepickerSubscriptions: Subscription[] = [];\r\n    onTouched = () => {};\r\n    private onChange: (value: any) => void = () => {};\r\n\r\n    constructor(private elementRef: ElementRef) {\r\n    }\r\n\r\n    private set defaultTime(time: string) {\r\n        if (TimeAdapter.isTimeAvailable(time, <Moment>this._min, <Moment>this._max, 'minutes')) {\r\n            this._timepicker.setDefaultTime(TimeAdapter.formatTime(time, this._format));\r\n        }\r\n    }\r\n\r\n    onInput(value: string) {\r\n        this.value = value;\r\n        this.onChange(value);\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes['value'] && changes['value'].currentValue) {\r\n            this.defaultTime = changes['value'].currentValue;\r\n        }\r\n    }\r\n\r\n    @HostListener('click', ['$event'])\r\n    onClick(event) {\r\n        if (!this.disableClick) {\r\n            this._timepicker.open();\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n\r\n    writeValue(value: string): void {\r\n        this.value = value;\r\n        this.defaultTime = value;\r\n    }\r\n\r\n    registerOnChange(fn: (value: any) => void): void {\r\n        this.onChange = fn;\r\n    }\r\n\r\n    registerOnTouched(fn: () => void): void {\r\n        this.onTouched = fn;\r\n    }\r\n\r\n    setDisabledState(isDisabled: boolean): void {\r\n        this.disabled = isDisabled;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.timepickerSubscriptions.forEach(s => s.unsubscribe());\r\n    }\r\n\r\n    private registerTimepicker(picker: NgxMaterialTimepickerComponent): void {\r\n        if (picker) {\r\n            this._timepicker = picker;\r\n            this._timepicker.registerInput(this);\r\n            this.timepickerSubscriptions.push(this._timepicker.timeSet.subscribe((time: string) => {\r\n                this.value = time;\r\n                this.onChange(this._value);\r\n                this.onTouched();\r\n            }));\r\n            this.timepickerSubscriptions.push(\r\n                this._timepicker.closed.subscribe(() => this.defaultTime = this._value));\r\n        } else {\r\n            throw new Error('NgxMaterialTimepickerComponent is not defined.' +\r\n                ' Please make sure you passed the timepicker to ngxTimepicker directive');\r\n        }\r\n    }\r\n\r\n    private updateInputValue(): void {\r\n        this.elementRef.nativeElement.value = this.value;\r\n    }\r\n\r\n}\r\n\r\n","import {Directive, HostListener} from '@angular/core';\r\nimport {NgxMaterialTimepickerEventService} from '../services/ngx-material-timepicker-event.service';\r\n\r\n@Directive({\r\n    selector: '[overlay]'\r\n})\r\nexport class OverlayDirective {\r\n\r\n    constructor(private eventService: NgxMaterialTimepickerEventService) {\r\n    }\r\n\r\n\r\n    @HostListener('click', ['$event'])\r\n    onClick(e: MouseEvent) {\r\n        this.eventService.dispatchEvent(e);\r\n        e.preventDefault();\r\n    }\r\n\r\n}\r\n","import {Directive} from '@angular/core';\r\n\r\n/* To override a default toggle icon */\r\n@Directive({selector: '[ngxMaterialTimepickerToggleIcon]'})\r\n\r\nexport class NgxMaterialTimepickerToggleIconDirective {\r\n}\r\n","import {Component, ContentChild, Input} from '@angular/core';\r\nimport {NgxMaterialTimepickerToggleIconDirective} from '../../directives/ngx-material-timepicker-toggle-icon.directive';\r\nimport {NgxMaterialTimepickerComponent} from '../../ngx-material-timepicker.component';\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-toggle',\r\n    templateUrl: 'ngx-material-timepicker-toggle.component.html',\r\n    styleUrls: ['ngx-material-timepicker-toggle.component.scss']\r\n})\r\n\r\nexport class NgxMaterialTimepickerToggleComponent {\r\n\r\n    @Input('for') timepicker: NgxMaterialTimepickerComponent;\r\n\r\n    @Input()\r\n    get disabled(): boolean {\r\n        return this._disabled === undefined ? this.timepicker.disabled : this._disabled;\r\n    }\r\n\r\n    set disabled(value: boolean) {\r\n        this._disabled = value;\r\n    }\r\n\r\n    private _disabled: boolean;\r\n\r\n    @ContentChild(NgxMaterialTimepickerToggleIconDirective) customIcon: NgxMaterialTimepickerToggleIconDirective;\r\n\r\n    open(event): void {\r\n        if (this.timepicker) {\r\n            this.timepicker.open();\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n}\r\n","import {EventEmitter, Input, Output} from '@angular/core';\r\nimport {ClockFaceTime} from '../../models/clock-face-time.interface';\r\nimport {Moment} from 'moment';\r\nimport {TimepickerTime} from '../../timepicker-time.namespace';\r\n\r\n\r\nexport class NgxMaterialTimepickerHoursFace {\r\n\r\n    @Input() selectedHour: ClockFaceTime;\r\n    @Input() minTime: Moment;\r\n    @Input() maxTime: Moment;\r\n    @Input() format: number;\r\n\r\n    @Output() hourChange = new EventEmitter<ClockFaceTime>();\r\n    @Output() hourSelected = new EventEmitter<null>();\r\n\r\n    hoursList: ClockFaceTime[] = [];\r\n\r\n    protected constructor(format: number) {\r\n        this.hoursList = TimepickerTime.getHours(format);\r\n    }\r\n}\r\n","import {Component, Input, OnChanges, SimpleChanges} from '@angular/core';\r\nimport {NgxMaterialTimepickerHoursFace} from '../timepicker-hours-face/ngx-material-timepicker-hours-face';\r\nimport {TimePeriod} from '../../models/time-period.enum';\r\nimport {TimepickerTime} from '../../timepicker-time.namespace';\r\n\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-12-hours-face',\r\n    templateUrl: 'ngx-material-timepicker-12-hours-face.component.html'\r\n})\r\n\r\nexport class NgxMaterialTimepicker12HoursFaceComponent extends NgxMaterialTimepickerHoursFace implements OnChanges {\r\n\r\n    @Input() period: TimePeriod;\r\n\r\n    constructor() {\r\n        super(12);\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes['period'] && changes['period'].currentValue) {\r\n            this.hoursList = TimepickerTime.disableHours(this.hoursList, {\r\n                min: this.minTime,\r\n                max: this.maxTime,\r\n                format: this.format,\r\n                period: this.period\r\n            });\r\n        }\r\n    }\r\n}\r\n","import {AfterContentInit, Component} from '@angular/core';\r\nimport {NgxMaterialTimepickerHoursFace} from '../timepicker-hours-face/ngx-material-timepicker-hours-face';\r\nimport {TimepickerTime} from '../../timepicker-time.namespace';\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-24-hours-face',\r\n    templateUrl: 'ngx-material-timepicker-24-hours-face.component.html'\r\n})\r\n\r\nexport class NgxMaterialTimepicker24HoursFaceComponent extends NgxMaterialTimepickerHoursFace implements AfterContentInit {\r\n\r\n    constructor() {\r\n        super(24);\r\n    }\r\n\r\n    ngAfterContentInit() {\r\n        this.hoursList = TimepickerTime.disableHours(this.hoursList, {\r\n            min: this.minTime,\r\n            max: this.maxTime,\r\n            format: this.format\r\n        });\r\n    }\r\n}\r\n","import {ChangeDetectionStrategy, Component, EventEmitter, Input, OnChanges, Output, SimpleChanges} from '@angular/core';\r\nimport {TimePeriod} from '../../models/time-period.enum';\r\nimport {TimeUnit} from '../../models/time-unit.enum';\r\nimport {TimepickerTime} from '../../timepicker-time.namespace';\r\nimport {ClockFaceTime} from '../../models/clock-face-time.interface';\r\nimport {Moment} from 'moment';\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-dial',\r\n    templateUrl: 'ngx-material-timepicker-dial.component.html',\r\n    styleUrls: ['ngx-material-timepicker-dial.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NgxMaterialTimepickerDialComponent implements OnChanges {\r\n\r\n    timeUnit = TimeUnit;\r\n\r\n    hours: ClockFaceTime[];\r\n    minutes: ClockFaceTime[];\r\n\r\n    @Input() hour: number | string;\r\n    @Input() minute: number | string;\r\n    @Input() format: number;\r\n    @Input() period: TimePeriod;\r\n    @Input() activeTimeUnit: TimeUnit;\r\n    @Input() minTime: Moment;\r\n    @Input() maxTime: Moment;\r\n    @Input() isEditable: boolean;\r\n    @Input() minutesGap: number;\r\n\r\n    @Output() periodChanged = new EventEmitter<TimePeriod>();\r\n    @Output() timeUnitChanged = new EventEmitter<TimeUnit>();\r\n    @Output() hourChanged = new EventEmitter<ClockFaceTime>();\r\n    @Output() minuteChanged = new EventEmitter<ClockFaceTime>();\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes['period'] && changes['period'].currentValue\r\n            || changes['format'] && changes['format'].currentValue) {\r\n            const hours = TimepickerTime.getHours(this.format);\r\n\r\n            this.hours = TimepickerTime.disableHours(hours, {\r\n                min: this.minTime,\r\n                max: this.maxTime,\r\n                format: this.format,\r\n                period: this.period\r\n            });\r\n        }\r\n        if (changes['period'] && changes['period'].currentValue\r\n            || changes['hour'] && changes['hour'].currentValue) {\r\n            const minutes = TimepickerTime.getMinutes(this.minutesGap);\r\n\r\n            this.minutes = TimepickerTime.disableMinutes(minutes, +this.hour, {\r\n                min: this.minTime,\r\n                max: this.maxTime,\r\n                format: this.format,\r\n                period: this.period\r\n            });\r\n        }\r\n    }\r\n\r\n    changeTimeUnit(unit: TimeUnit): void {\r\n        this.timeUnitChanged.next(unit);\r\n    }\r\n\r\n    changePeriod(period: TimePeriod): void {\r\n        this.periodChanged.next(period);\r\n    }\r\n\r\n    changeHour(hour: ClockFaceTime): void {\r\n        this.hourChanged.next(hour);\r\n    }\r\n\r\n    changeMinute(minute: ClockFaceTime): void {\r\n        this.minuteChanged.next(minute);\r\n    }\r\n}\r\n","import {Component, EventEmitter, Input, OnChanges, Output, SimpleChanges} from '@angular/core';\r\nimport {ClockFaceTime} from '../../models/clock-face-time.interface';\r\nimport {TimeUnit} from '../../models/time-unit.enum';\r\nimport {TimeFormatterPipe} from '../../pipes/time-formatter.pipe';\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-dial-control',\r\n    templateUrl: 'ngx-material-timepicker-dial-control.component.html',\r\n    styleUrls: ['ngx-material-timepicker-dial-control.component.scss']\r\n})\r\nexport class NgxMaterialTimepickerDialControlComponent implements OnChanges {\r\n\r\n    previousTime: number | string;\r\n\r\n    @Input() timeList: ClockFaceTime[];\r\n    @Input() timeUnit: TimeUnit;\r\n    @Input() time: string;\r\n    @Input() isActive: boolean;\r\n    @Input() isEditable: boolean;\r\n\r\n    @Output() timeUnitChanged = new EventEmitter<TimeUnit>();\r\n    @Output() timeChanged = new EventEmitter<ClockFaceTime>();\r\n\r\n    private get selectedTime(): ClockFaceTime {\r\n        if (!!this.time) {\r\n            return this.timeList.find(t => t.time === +this.time);\r\n        }\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes['time'] && (changes['time'].currentValue !== undefined)) {\r\n            if (this.isEditable && !changes['time'].firstChange) {\r\n                return;\r\n            }\r\n            this.time = new TimeFormatterPipe().transform(+changes['time'].currentValue, this.timeUnit)\r\n        }\r\n    }\r\n\r\n    saveTimeAndChangeTimeUnit(event: FocusEvent, unit: TimeUnit): void {\r\n        event.preventDefault();\r\n        this.previousTime = this.time;\r\n        this.timeUnitChanged.next(unit);\r\n    }\r\n\r\n    updateTime(): void {\r\n        const time = this.selectedTime;\r\n        if (time) {\r\n            this.timeChanged.next(time);\r\n            this.previousTime = time.time;\r\n        }\r\n    }\r\n\r\n    formatTime(): void {\r\n        if (this.isEditable) {\r\n            const time = this.time || this.previousTime;\r\n            this.time = new TimeFormatterPipe().transform(+time, this.timeUnit);\r\n        }\r\n    }\r\n\r\n    onKeyDown(e: KeyboardEvent): void {\r\n        const char = String.fromCharCode(e.keyCode);\r\n\r\n\r\n        if ((!isInputAllowed(e)) || isTimeDisabledToChange(this.time, char, this.timeList)) {\r\n            e.preventDefault();\r\n        }\r\n\r\n        if (isInputAllowed(e)) {\r\n            this.changeTimeByArrow(e.keyCode);\r\n        }\r\n    }\r\n\r\n    private changeTimeByArrow(keyCode: number): void {\r\n        const ARROW_UP = 38;\r\n        const ARROW_DOWN = 40;\r\n        let time: string;\r\n\r\n        if (keyCode === ARROW_UP) {\r\n            time = String(+this.time + 1);\r\n        } else if (keyCode === ARROW_DOWN) {\r\n            time = String(+this.time - 1);\r\n        }\r\n\r\n        if (!isTimeUnavailable(time, this.timeList)) {\r\n            this.time = time;\r\n            this.updateTime();\r\n        }\r\n    }\r\n\r\n}\r\n\r\nfunction isInputAllowed(e: KeyboardEvent): boolean {\r\n    // Allow: backspace, delete, tab, escape, enter\r\n    if ([46, 8, 9, 27, 13].some(n => n === e.keyCode) ||\r\n        // Allow: Ctrl/cmd+A\r\n        (e.keyCode == 65 && (e.ctrlKey === true || e.metaKey === true)) ||\r\n        // Allow: Ctrl/cmd+C\r\n        (e.keyCode == 67 && (e.ctrlKey === true || e.metaKey === true)) ||\r\n        // Allow: Ctrl/cmd+X\r\n        (e.keyCode == 88 && (e.ctrlKey === true || e.metaKey === true)) ||\r\n        // Allow: home, end, left, right, up, down\r\n        (e.keyCode >= 35 && e.keyCode <= 40)) {\r\n\r\n        return true;\r\n    }\r\n    return !((e.keyCode < 48 || e.keyCode > 57) && (e.keyCode < 96 || e.keyCode > 105))\r\n}\r\n\r\nfunction isTimeDisabledToChange(currentTime: string, nextTime: string, timeList: ClockFaceTime[]): boolean {\r\n    const isNumber = /\\d/.test(nextTime);\r\n\r\n    if (isNumber) {\r\n        const time = currentTime + nextTime;\r\n        return isTimeUnavailable(time, timeList);\r\n    }\r\n}\r\n\r\nfunction isTimeUnavailable(time: string, timeList: ClockFaceTime[]): boolean {\r\n    const selectedTime = timeList.find(value => value.time === +time);\r\n    return !selectedTime || (selectedTime && selectedTime.disabled);\r\n}\r\n","import {Pipe, PipeTransform} from '@angular/core';\r\n\r\n@Pipe({\r\n    name: 'minutesFormatter'\r\n})\r\nexport class MinutesFormatterPipe implements PipeTransform {\r\n\r\n    transform(minute: number, gap = 5): number | string {\r\n        if (!minute) {\r\n            return minute;\r\n        }\r\n\r\n        return minute % gap === 0 ? minute : '';\r\n    }\r\n\r\n}\r\n","import {Component, EventEmitter, Input, Output} from '@angular/core';\r\nimport {TimePeriod} from '../../models/time-period.enum';\r\nimport {TimeUnit} from '../../models/time-unit.enum';\r\nimport {ClockFaceTime} from '../../models/clock-face-time.interface';\r\nimport {TimepickerTime} from '../../timepicker-time.namespace';\r\nimport {Moment} from 'moment';\r\nimport {animate, sequence, style, transition, trigger} from '@angular/animations';\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-period',\r\n    templateUrl: 'ngx-material-timepicker-period.component.html',\r\n    styleUrls: ['ngx-material-timepicker-period.component.scss'],\r\n    animations: [\r\n        trigger('scaleInOut', [\r\n            transition(':enter', [\r\n                style({transform: 'scale(0)'}),\r\n                animate('.2s', style({transform: 'scale(1)'})),\r\n                sequence([\r\n                    animate('3s', style({opacity: 1})),\r\n                    animate('.3s', style({opacity: 0}))\r\n                ])\r\n            ])\r\n        ])\r\n    ]\r\n})\r\nexport class NgxMaterialTimepickerPeriodComponent {\r\n\r\n    timePeriod = TimePeriod;\r\n    isPeriodAvailable = true;\r\n\r\n    @Input() selectedPeriod: TimePeriod;\r\n    @Input() format: number;\r\n    @Input() activeTimeUnit: TimeUnit;\r\n    @Input() hours: ClockFaceTime[];\r\n    @Input() minutes: ClockFaceTime[];\r\n    @Input() minTime: Moment;\r\n    @Input() maxTime: Moment;\r\n    @Input() selectedHour: number | string;\r\n\r\n    @Output() periodChanged = new EventEmitter<TimePeriod>();\r\n\r\n    changePeriod(period: TimePeriod): void {\r\n        this.isPeriodAvailable = this.isSwitchPeriodAvailable(period);\r\n        if (this.isPeriodAvailable) {\r\n            this.periodChanged.next(period);\r\n        }\r\n    }\r\n\r\n    animationDone(): void {\r\n        this.isPeriodAvailable = true;\r\n    }\r\n\r\n    private isSwitchPeriodAvailable(period: TimePeriod): boolean {\r\n        const time = this.getDisabledTimeByPeriod(period);\r\n        return !time.every(t => t.disabled);\r\n    }\r\n\r\n    private getDisabledTimeByPeriod(period: TimePeriod): ClockFaceTime[] {\r\n        switch (this.activeTimeUnit) {\r\n            case TimeUnit.HOUR:\r\n                return TimepickerTime.disableHours(this.hours, {\r\n                    min: this.minTime,\r\n                    max: this.maxTime,\r\n                    format: this.format,\r\n                    period\r\n                });\r\n            case TimeUnit.MINUTE:\r\n                return TimepickerTime.disableMinutes(this.minutes, +this.selectedHour, {\r\n                    min: this.minTime,\r\n                    max: this.maxTime,\r\n                    format: this.format,\r\n                    period\r\n                });\r\n            default:\r\n                throw new Error('no such TimeUnit');\r\n        }\r\n    }\r\n}\r\n","import {Directive, ElementRef, Inject, Input, OnChanges, OnDestroy, Optional} from '@angular/core';\r\nimport {DOCUMENT} from '@angular/common';\r\n\r\n@Directive({\r\n    selector: '[timepickerAutofocus]'\r\n})\r\nexport class AutofocusDirective implements OnChanges, OnDestroy {\r\n\r\n    @Input('timepickerAutofocus') isFocusActive: boolean;\r\n\r\n    private activeElement: HTMLElement;\r\n\r\n    constructor(private element: ElementRef, @Optional() @Inject(DOCUMENT) private document: any) {\r\n        this.activeElement = this.document.activeElement;\r\n    }\r\n\r\n    ngOnChanges() {\r\n        if (this.isFocusActive) {\r\n            // To avoid ExpressionChangedAfterItHasBeenCheckedError;\r\n            setTimeout(() => this.element.nativeElement.focus());\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        // To avoid ExpressionChangedAfterItHasBeenCheckedError;\r\n        setTimeout(() => this.activeElement.focus());\r\n    }\r\n}\r\n","import {ModuleWithProviders, NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgxMaterialTimepickerComponent} from './ngx-material-timepicker.component';\r\nimport {StyleSanitizerPipe} from './pipes/style-sanitizer.pipe';\r\nimport {NgxMaterialTimepickerMinutesFaceComponent} from './components/timepicker-minutes-face/ngx-material-timepicker-minutes-face.component';\r\nimport {NgxMaterialTimepickerService} from './services/ngx-material-timepicker.service';\r\nimport {NgxMaterialTimepickerFaceComponent} from './components/timepicker-face/ngx-material-timepicker-face.component';\r\nimport {TimeFormatterPipe} from './pipes/time-formatter.pipe';\r\nimport {NgxMaterialTimepickerButtonComponent} from './components/timepicker-button/ngx-material-timepicker-button.component';\r\nimport {TimepickerDirective} from './directives/ngx-timepicker.directive';\r\nimport {OverlayDirective} from './directives/overlay.directive';\r\nimport {NgxMaterialTimepickerEventService} from './services/ngx-material-timepicker-event.service';\r\nimport {NgxMaterialTimepickerToggleComponent} from './components/timepicker-toggle-button/ngx-material-timepicker-toggle.component';\r\nimport {NgxMaterialTimepickerToggleIconDirective} from './directives/ngx-material-timepicker-toggle-icon.directive';\r\nimport {NgxMaterialTimepicker12HoursFaceComponent} from './components/timepicker-12-hours-face/ngx-material-timepicker-12-hours-face.component';\r\nimport {NgxMaterialTimepicker24HoursFaceComponent} from './components/timepicker-24-hours-face/ngx-material-timepicker-24-hours-face.component';\r\nimport {FormsModule} from '@angular/forms';\r\nimport {NgxMaterialTimepickerDialComponent} from './components/timepicker-dial/ngx-material-timepicker-dial.component';\r\nimport {NgxMaterialTimepickerDialControlComponent} from './components/timepicker-dial-control/ngx-material-timepicker-dial-control.component';\r\nimport {MinutesFormatterPipe} from './pipes/minutes-formatter.pipe';\r\nimport {NgxMaterialTimepickerPeriodComponent} from './components/timepicker-period/ngx-material-timepicker-period.component';\r\nimport {AutofocusDirective} from './directives/autofocus.directive';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule\r\n    ],\r\n    exports: [\r\n        NgxMaterialTimepickerComponent,\r\n        NgxMaterialTimepickerToggleComponent,\r\n        TimepickerDirective,\r\n        NgxMaterialTimepickerToggleIconDirective\r\n    ],\r\n    declarations: [\r\n        NgxMaterialTimepickerComponent,\r\n        NgxMaterialTimepicker24HoursFaceComponent,\r\n        NgxMaterialTimepicker12HoursFaceComponent,\r\n        NgxMaterialTimepickerMinutesFaceComponent,\r\n        NgxMaterialTimepickerFaceComponent,\r\n        NgxMaterialTimepickerToggleComponent,\r\n        NgxMaterialTimepickerButtonComponent,\r\n        NgxMaterialTimepickerDialComponent,\r\n        NgxMaterialTimepickerDialControlComponent,\r\n        NgxMaterialTimepickerPeriodComponent,\r\n        StyleSanitizerPipe,\r\n        TimeFormatterPipe,\r\n        TimepickerDirective,\r\n        OverlayDirective,\r\n        NgxMaterialTimepickerToggleIconDirective,\r\n        AutofocusDirective,\r\n        MinutesFormatterPipe\r\n    ]\r\n})\r\nexport class NgxMaterialTimepickerModule {\r\n    static forRoot(): ModuleWithProviders {\r\n        return {\r\n            ngModule: NgxMaterialTimepickerModule,\r\n            providers: [NgxMaterialTimepickerService, NgxMaterialTimepickerEventService]\r\n        };\r\n    }\r\n}\r\n"]}